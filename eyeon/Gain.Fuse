--[[--
Gain.Fuse 

An example Fuse which implements a simple Gain. Demonstrates the Slider and Combo control types. Also a good example of the various methods of processing pixels in an image.

version 1.0
August 21st, 2007
--]]--

FuRegisterClass("Gain", CT_Tool, {
	REGS_Category = "Fuses",
	REGS_OpIconString = "fGn",
	REGS_OpDescription = "Gain Fuse",
	})

function Create()
	InMethod = self:AddInput("Method", "Method", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ComboControl",
		INP_Default = 0.0,
		INP_Integer = true,
		{ CCS_AddString = "Simple Loop", },
		{ CCS_AddString = "DoMultiProcess", },
		{ CCS_AddString = "ProcessPixels", },
		{ CCS_AddString = "MultiProcessPixels", },
		})
	
	InGain = self:AddInput("Gain", "Gain", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_Default = 2.0,
		})			

	InImage = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})

	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})				
end


function Process(req) 
	local img = InImage:GetValue(req)
	local gain = InGain:GetValue(req).Value
	local method = InMethod:GetValue(req).Value
	
	local out = Image({IMG_Like = img})
	

	
	if method == 0 then
		local p = Pixel()
		for y=0,img.Height-1 do
			if self.Status ~= "OK" then break end
			
			for x=0,img.Width-1 do
				img:GetPixel(x,y, p)
				p.R = p.R * gain
				p.G = p.G * gain
				p.B = p.B * gain
				out:SetPixel(x,y, p)
			end
		end
	elseif method == 1 then
		self:DoMultiProcess(nil, { In = img, Out = out, Gain = gain }, img.Height, function (y)
			local p = Pixel()
			for x=0,In.Width-1 do
				In:GetPixel(x,y, p)
				p.R = p.R * Gain
				p.G = p.G * Gain
				p.B = p.B * Gain
				Out:SetPixel(x,y, p)
			end
			end)
	elseif method == 2 then
		out:ProcessPixels(0,0, img.Width, img.Height, img, 	function (x,y, p)
			p.R = p.R * gain
			p.G = p.G * gain
			p.B = p.B * gain
			return p
			end)
	elseif method == 3 then
		out:MultiProcessPixels(nil, { Gain = gain }, 0,0, img.Width, img.Height, img, 	function (x,y, p)
			p.R = p.R * Gain
			p.G = p.G * Gain
			p.B = p.B * Gain
			return p
			end)
	end
	
	OutImage:Set(req, out)
end
