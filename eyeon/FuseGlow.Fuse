--[[--
This Fuse clones the functionality of the standard Glow tool in Fusion as closely as possible.
It is not intended to replace the Glow tool, but to act as an example for anyone creating 
a Fuse which needs to mimic part of what Glow does.

Currently this tool does not 

 - multi-box
 - apply modes
 - clone the blend slider....
 - glow mask
 
Requires   : Fusion 5.21 Build 23 or later
Written By : Isaac Guenard [izyk@eyeonline.com]
Written On : December 1st, 2007

Things to document :
	
--]]--

FuRegisterClass("FuseGlow", CT_Tool, {
	REGS_Name = "Fuse Glow",
	REGS_Category = "Fuses\\Clones\\Blur",
	REGS_OpIconString = "FGlo",
	REGS_OpDescription = "Fuse Glow",
	REG_NoMotionBlurCtrls = true,
	REG_NoBlendCtrls = true,
	})
 
function Create()
	InFilter = self:AddInput("Filter", "Filter", {
		LINKID_DataType = "Number",
		INPID_InputControl = "MultiButtonControl",
		INP_Default = 3.0,
		{MBTNC_AddButton = "Soften", 	MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Bartlett", 	MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Multi-box", MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Gaussian", MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Blend", 	MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Hilight", 	MBTNCD_ButtonWidth = 0.25, },
		{MBTNC_AddButton = "Solarize", 	MBTNCD_ButtonWidth = 0.25, },		
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})

	InR = self:AddInput("Red", "Red", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		

	InG = self:AddInput("Green", "Green", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		

	InB = self:AddInput("Blue", "Blue", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		

	InA = self:AddInput("Alpha", "Alpha", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		
		
	InLockXY = self:AddInput("Lock X/Y", "LockXY", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})
		
	InSizeX = self:AddInput("X Glow Size", "XGlowSize", {
		LINKS_Name = "Glow Size",
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 100.0,
		INP_Default = 10.0,
		})		

	InSizeY = self:AddInput("Y Glow Size", "YGlowSize", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 100.0,
		INP_Default = 10.0,
		IC_Visible = false,
		})

	InPasses = self:AddInput("Num Passes", "NumPasses", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 16.0,
		INP_MaxAllowed = 64.0,
		INP_Default = 4.0,
		INP_Integer = true,
		IC_Visible = false,
		})			
	
	InGlow = self:AddInput("Glow", "Glow", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 1.0,
		INP_Default = 0.8,
		})	
		
	InGlowBlend = self:AddInput("Glow Blend", "GlowBlend", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 1.0,
		INP_MaxAllowed = 1.0,
		INP_Default = 0.2,
		})		
	

	--[[ -- this is for cloning the blend slider which we can't do	
	self:CloneInput(InBlend, "BlendClone", {})
	
	if not self.IsBeingLoaded then
		InBlend:SetSource(Number(0.2), TIME_UNDEFINED)
	end
	--]]--
	
	--[[-- Not doing apply modes yet
	InApply = self:AddInput("Apply Mode", "ApplyMode", {
		LINKID_DataType = "Number",
		INPID_InputControl = "MultiButtonControl",
		INP_Default = 3.0,
		{MBTNC_AddButton = "Normal", 	MBTNCD_ButtonWidth = 1/3, },
		{MBTNC_AddButton = "Merge Under", 	MBTNCD_ButtonWidth = 1/3, },
		{MBTNC_AddButton = "Threshold", MBTNCD_ButtonWidth = 1/3, },
		})
	--]]--
	
	self:BeginControlNest("Color Scale", "ColorScale", false, {})
	
		InScaleR = self:AddInput("Red Scale", "RedScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})		
		InScaleG = self:AddInput("Green Scale", "GreenScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})
		InScaleB = self:AddInput("Blue Scale", "BlueScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})
		InScaleA = self:AddInput("Alpha Scale", "AlphaScale", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_MaxScale = 2.0,
			INP_Default = 1.0,
			})		
	self:EndControlNest()

	--[[-- Not doing the premask yet either 
	InGlowMask = self:AddInput("Glow Mask", "GlowMask", {
		LINKID_DataType = "Mask",
		INP_Required = false,
		INP_MatchSize = true,
		})
	--]]--
	
	InImage = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})

	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})				
end
 
function Process(req) 
	local img = InImage:GetValue(req)
	local glow_x = InSizeX:GetValue(req).Value / 720
	local locked = (InLockXY:GetValue(req).Value > 0.5)
	
	if locked == true then 
		glow_y = glow_x
	else
		glow_y = InSizeY:GetValue(req).Value
	end
	
	local filter = InFilter:GetValue(req).Value
	local do_r = InR:GetValue(req).Value
	local do_g = InG:GetValue(req).Value
	local do_b = InB:GetValue(req).Value
	local do_a = InA:GetValue(req).Value
	local scale_r = InScaleR:GetValue(req).Value
	local scale_g = InScaleG:GetValue(req).Value
	local scale_b = InScaleB:GetValue(req).Value
	local scale_a = InScaleA:GetValue(req).Value
	local glow = 1.0 - InGlow:GetValue(req).Value
	local blend = InGlowBlend:GetValue(req).Value
	local passes = math.floor( InPasses:GetValue(req).Value + 0.5 ) -- make damn sure this is an integer
	
	local result = Image({IMG_Like = img})
	
	local filters = {"Soften", "Bartlett", "Multi-box", "Gaussian", "Blend", "Hilight", "Solarise"}

	img:Blur(result, {
		BLUR_Type = filters[filter+1], 
		BLUR_Red = do_r,
		BLUR_Green = do_g,
		BLUR_Blue = do_b,
		BLUR_Alpha = do_a,
		BLUR_XSize = glow_x, 
		BLUR_YSize = glow_y,
		BLUR_Blend = blend,
		BLUR_Normalize = glow,
		BLUR_Passes = passes,
		BLUR_RedScale = scale_r,
		BLUR_GreenScale = scale_g,
		BLUR_BlueScale = scale_b,
		BLUR_AlphaScale = scale_a,
		})
	
	OutImage:Set(req, result)
end

function NotifyChanged(inp, param, time)
	if inp == InLockXY then   -- Update our sliders
		local locked = (param.Value > 0.5)
		
		if locked then
			InSizeX:SetAttrs({ LINKS_Name = "Glow Size" })
			InSizeY:SetAttrs({ IC_Visible = false })
		else
			InSizeX:SetAttrs({ LINKS_Name = "X Glow Size" })
			InSizeY:SetAttrs({ IC_Visible = true })
		end
	elseif inp == InFilter then
	
		InPasses:SetAttrs({ IC_Visible = (param.Value == 2), })
	end
end
